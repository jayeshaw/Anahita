#!/usr/bin/env python
PACKAGE="vision_tasks"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

## Blue filter parameters
gen.add("clahe_clip", double_t, 0, "Clip limit for CLAHE", 0.15, 0.0, 40.0);
gen.add("clahe_grid_size", int_t, 0, "Grid size of the CLAHE operator", 3, 1, 16);
gen.add("clahe_bilateral_iter", int_t, 0, "Number of iterations of bilateral filter after CLAHE is applied", 2, 0, 16);
gen.add("balanced_bilateral_iter", int_t, 0, "Number of iterations of bilateral filter after white balancing is applied", 4, 0, 8);
gen.add("denoise_h", double_t, 0, "h value for fast non-local means denoising applied on the final blue-filtered image", 10.0, 0, 20.0);

## Thresholding parameters
gen.add("low_h", int_t, 0, "Lower Bound of H", 0, 0, 255);
gen.add("high_h", int_t, 0, "Higher Bound of H",16, 0, 255);
gen.add("low_s", int_t, 0, "Lower Bound of S", 225, 0, 255);
gen.add("high_s", int_t, 0, "Higher Bound of S", 255, 0, 255);
gen.add("low_v", int_t, 0, "Lower Bound of V",210, 0, 255);
gen.add("high_v", int_t, 0, "Higher Bound of V", 255, 0, 255);
1
## Morphological parameters
gen.add("closing_mat_point", int_t, 0, "Center of the matrix for the closing operation (size extrapolated 2x+1)", 3, 1, 7);
gen.add("closing_iter", int_t, 0, "Iterations of closing applied on the thresholded image", 5, 0, 10);

## Canny edge detection parameters
gen.add("canny_threshold_low", int_t, 0, "Lower threshold for the pixel intensity gradient", 0, 0, 1000);
gen.add("canny_threshold_high", int_t, 0, "Higher threshold for the pixel intensity gradient", 1000, 0, 1000);
gen.add("canny_kernel_size", int_t, 0, "Kernel size of the operator", 3, 3, 7);

## Probabilistic Hough line transform parameters
gen.add("hough_minline", int_t, 0, "Minimum length of the detected lines", 200, 0, 500);
gen.add("hough_threshold", int_t, 0, "Minimum number of intersections to be considered as part of one line", 105, 0, 500);
gen.add("hough_maxgap", int_t, 0, "Maximum gap between two points to be considered the same line", 61, 0, 500);

## Horizontal and vertical lines filter parameters
gen.add("hough_angle_tolerance", double_t, 0, "Tolerance angle with respect to 0, 90 and 180 degrees to be considered as a probable line", 20.0, 0, 45.0);

## Gate detection parameters
gen.add("gate_distance_tolerance", double_t, 0, "Maximum distance between atleast one pair of points to be considered close to each other", 50.0, 0.0, 500.0);
gen.add("gate_angle_tolerance", double_t, 0, "Tolerance angle with respect to 90 to be considered as perpendicular", 20.0, 0, 45.0);

exit(gen.generate(PACKAGE, "vision_tasks", "gateFrontRange"));
